import numpy as np
import tensorflow as tf
from tensorflow.python.client import device_lib
from tensorflow import keras

# load and preprocess data set
train_dat = np.genfromtxt( "train.csv", delimiter=",")
test_dat = np.genfromtxt( "test.csv", delimiter=',')

x_train = train_dat[:, :-1]
y_train = train_dat[:, -1]

x_test = test_dat[:, :-1]
y_test = test_dat[:, -1]

width = [5, 10, 25, 50, 100]
'''
#define layers 3
layers =[#keras.layers.Flatten( input_shape = x_train[0].shape),
        keras.layers.Dense(5),
        keras.layers.Dense(width[4], activation = keras.activations.relu),
        keras.layers.Dense(width[4], activation = keras.activations.relu),
        keras.layers.Dense(2, activation = keras.activations.relu)]
'''
'''
#define layers 5
layers =[#keras.layers.Flatten( input_shape = x_train[0].shape),
        keras.layers.Dense(5),
        keras.layers.Dense(width[4], activation = keras.activations.relu),
        keras.layers.Dense(width[4], activation = keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(2, activation = keras.activations.relu)]
'''

#define layers 9
layers =[#keras.layers.Flatten( input_shape = x_train[0].shape),
        keras.layers.Dense(5),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(width[4], activation=keras.activations.relu),
        keras.layers.Dense(2, activation = keras.activations.relu)]

model = keras.models.Sequential(layers)

model.compile( optimizer = keras.optimizers.Adam(), loss = 'sparse_categorical_crossentropy',
              metrics = ['accuracy'])

#train
model.fit(x_train, y_train, epochs=5)

#evaluate
test_loss_val, test_acc_val = model.evaluate(x_test, y_test)
train_loss_val, train_acc_val = model.evaluate(x_train, y_train)
print('Test Acc:',test_acc_val)
print('Train Acc:',train_acc_val)
